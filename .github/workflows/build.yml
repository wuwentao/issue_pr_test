name: pull_request
on: push

env:
  MY_NAME: "My Global Name"

concurrency: 
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  dump_contexts:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "My Test Name"
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
      - name: label check
        if: ${{ ! contains(github.event.issue.labels.*.name, 'bug') }}
        run:  echo "label bug exist"
      - name: milestone check
        if: ${{ ! github.event.pull_request.milestone }}
        run:  echo "milestone is ${{ github.event.pull_request.milestone }}"
        
      - name: Set the value to env variable
        id: step_one
        run: |
          echo "action_state=yellow" >> $GITHUB_ENV
      - name: Use the value from env variable
        id: step_two
        run: |
          echo "${{ env.action_state }}" # This will output 'yellow'
          
      - name: set output
        id: set_output
        run: echo "::set-output name=action_fruit::strawberry"
        
      - name: set debug
        id: set_debug
        run: echo "::debug::Set the Octocat variable"
      
      - name: mask string
        id: mask_str
        run: echo "::add-mask::$MY_NAME"
        
      - name: waring msg
        id: warning_msg
        run: |
          echo '::warning:: This is a warning message, to demonstrate that commands are being processed.'
          echo '::warning:: This is a warning again, because stop-commands has been turned off.'
             
  job1_output:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "::set-output name=test::hello"
      - id: step2
        run: echo "::set-output name=test::world"
  
  job2_show_output:
    runs-on: ubuntu-latest
    needs: job1_output
    steps:
      - name: echo output
        id: echo_output
        run: |
          echo ${{needs.job1_output.outputs.output1}} ${{needs.job1_output.outputs.output2}}
      
      - name: The job has failed
        id: failed_step
        if: ${{ failure() }}
        run: |
          echo "previous step failed"
      
      - name: The job has success
        id: success_step
        if: ${{ success() }}
        run: |
          echo "previous step success"
          
      - name: The job has cancel
        id: cancel_step
        if: ${{ cancelled() }}
        run: |
          echo "previous step canceled"
          
      - name: The job always run
        id: always_step
        if: ${{ always() }}
        run: |
          echo "previous step canceled"
          
      - name: force Failing step
        id: force_failed
        run: exit 1
      
      - name: The demo step has failed
        id: force_failed_if
        if: ${{ failure() && steps.force_failed.conclusion == 'failure' }}
        run: |
          echo "previous step failed with steps check"
          
      - name: success and failed and canceld
        id: always_step2
        if: ${{ success() || failure() || cancelled() }}
        run: |
          echo "success and failure and cancel will run"
         
        
